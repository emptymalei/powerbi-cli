{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Power BI CLI Tool","text":"<p><code>pbi_cli</code> is a CLI tool for Power BI written in Python.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"references/","title":"References","text":"<p>References for <code>pbi_cli</code>.</p>"},{"location":"references/cli/","title":"CLI","text":""},{"location":"references/cli/#command-line-interface","title":"Command Line Interface","text":""},{"location":"references/cli/#pbi","title":"pbi","text":"<p>Usage:</p> <pre><code>pbi [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"references/cli/#apps","title":"apps","text":"<p>Power BI Apps Command Group</p> <p>Usage:</p> <pre><code>pbi apps [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"references/cli/#app","title":"app","text":"<p>Retrieve information about a specific Power BI App</p> <p>Usage:</p> <pre><code>pbi apps app [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -a, --app-id TEXT              app id  [required]\n  -t, --target PATH              target file  [required]\n  -ft, --file-type [json|excel]\n  --help                         Show this message and exit.\n</code></pre>"},{"location":"references/cli/#augment","title":"augment","text":"<p>Augment Power BI Apps data from a source file and save to target file</p> <p>Usage:</p> <pre><code>pbi apps augment [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -s, --source PATH              source file  [required]\n  -t, --target PATH              target file  [required]\n  -ft, --file-type [json|excel]\n  --help                         Show this message and exit.\n</code></pre>"},{"location":"references/cli/#list","title":"list","text":"<p>List Power BI Apps and save them to files</p> <p>Usage:</p> <pre><code>pbi apps list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -tf, --target-folder PATH      target folder  [required]\n  -ft, --file-type [json|excel]\n  -r, --role [admin|user]\n  -n, --file-name TEXT           file name\n  --help                         Show this message and exit.\n</code></pre>"},{"location":"references/cli/#auth","title":"auth","text":"<p>get auth bearer token and cache it</p> <pre><code>pbi auth --bearer-token &lt;your_bearer_token&gt;\n</code></pre> <p>or</p> <pre><code>pbi auth -t &lt;your_bearer_token&gt;\n</code></pre> <p>for short.</p> <p>:param bearer_token: Bearer token to authenticate with Power BI API</p> <p>Usage:</p> <pre><code>pbi auth [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -t, --bearer-token TEXT  Bearer token  [required]\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"references/cli/#export","title":"export","text":"<p>get auth bearer token and cache it</p> <p>Usage:</p> <pre><code>pbi export [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -g, --group-id TEXT   Group ID  [required]\n  -r, --report-id TEXT  Report ID  [required]\n  -t, --target PATH     target file  [required]\n  --help                Show this message and exit.\n</code></pre>"},{"location":"references/cli/#reports","title":"reports","text":"<p>Reports Command Group</p> <p>Usage:</p> <pre><code>pbi reports [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"references/cli/#export_1","title":"export","text":"<p>Export report as file</p> <p>Usage:</p> <pre><code>pbi reports export [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -g, --group-id TEXT   Group ID  [required]\n  -r, --report-id TEXT  Report ID  [required]\n  -t, --target PATH     target file  [required]\n  --help                Show this message and exit.\n</code></pre>"},{"location":"references/cli/#users","title":"users","text":"<p>Command group for Power BI users</p> <p>Usage:</p> <pre><code>pbi users [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"references/cli/#user-access","title":"user-access","text":"<p>Get user access information from Power BI API</p> <p>Usage:</p> <pre><code>pbi users user-access [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -u, --user-id TEXT              user id  [required]\n  -tf, --target-folder PATH       target file\n  -ft, --file-types [json|excel]\n  -n, --file-name TEXT            file name without extension\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"references/cli/#workspaces","title":"workspaces","text":"<p>Command group for Power BI workspaces</p> <p>Usage:</p> <pre><code>pbi workspaces [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"references/cli/#format-convert","title":"format-convert","text":"<p>Convert output format of workspaces</p> <p>Usage:</p> <pre><code>pbi workspaces format-convert [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -s, --source PATH  source file  [required]\n  -t, --target PATH  target file  [required]\n  --format [excel]   format of the file\n  --help             Show this message and exit.\n</code></pre>"},{"location":"references/cli/#list_1","title":"list","text":"<p>List Power BI workspaces and save them to files</p> <p>Usage:</p> <pre><code>pbi workspaces list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --top INTEGER                   top n results  [required]\n  -tf, --target-folder PATH       target folder  [required]\n  -e, --expand [users|reports|dashboards|datasets|dataflows|workbooks]\n  -f, --filter TEXT               odata filter\n  -ft, --file-type [json|excel]\n  -n, --file-name TEXT            file name\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"references/cli/#auxiliary-functions","title":"Auxiliary Functions","text":""},{"location":"references/cli/#pbi_cli.cli.app","title":"<code>app(app_id, target, file_type='json')</code>","text":"<p>Retrieve information about a specific Power BI App</p> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@apps.command()\n@click.option(\"--app-id\", \"-a\", help=\"app id\", type=str, required=True)\n@click.option(\n    \"--target\", \"-t\", type=click.Path(exists=False), help=\"target file\", required=True\n)\n@click.option(\n    \"--file-type\", \"-ft\", type=click.Choice([\"json\", \"excel\"]), default=\"json\"\n)\ndef app(app_id: str, target: Path, file_type: str = \"json\"):\n    \"\"\"Retrieve information about a specific Power BI App\"\"\"\n    click.echo(f\"Investigating {app_id}\")\n\n    a_app = powerbi_app.App(auth=load_auth(), verify=False, app_id=app_id)\n    app_data = a_app()\n\n    if file_type == \"json\":\n        with open(target, \"w\") as fp:\n            json.dump(app_data, fp)\n    elif file_type == \"excel\":\n        app_data_flattened = a_app.flatten_app(app_data)\n        multi_group_dict_to_excel(app_data_flattened, target)\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.apps","title":"<code>apps(ctx)</code>","text":"<p>Power BI Apps Command Group</p> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@pbi.group(invoke_without_command=True)\n@click.pass_context\ndef apps(ctx):\n    \"\"\"Power BI Apps Command Group\"\"\"\n    if ctx.invoked_subcommand is None:\n        click.echo(\"Use pbi apps --help.\")\n    else:\n        pass\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.augment","title":"<code>augment(source, target, file_type='json')</code>","text":"<p>Augment Power BI Apps data from a source file and save to target file</p> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@apps.command()\n@click.option(\n    \"--source\",\n    \"-s\",\n    type=click.Path(exists=True, path_type=Path),\n    help=\"source file\",\n    required=True,\n)\n@click.option(\n    \"--target\",\n    \"-t\",\n    type=click.Path(exists=False, path_type=Path),\n    help=\"target file\",\n    required=True,\n)\n@click.option(\n    \"--file-type\", \"-ft\", type=click.Choice([\"json\", \"excel\"]), default=\"json\"\n)\ndef augment(source: Path, target: Path, file_type: str = \"json\"):\n    \"\"\"Augment Power BI Apps data from a source file and save to target file\"\"\"\n    if file_type == \"excel\":\n        if target.suffix:\n            click.echo(\"Use path as target for excel output\")\n            raise click.BadOptionUsage(message=f\"{target=}\")\n        else:\n            click.secho(f\"creating folder {target}\", fg=\"blue\")\n            target.mkdir(parents=True, exist_ok=True)\n\n    pbi_apps = powerbi_app.Apps(auth=load_auth(), verify=False, cache_file=source)\n\n    apps_data = []\n    for a in pbi_apps.apps:\n        try:\n            apps_data.append(a())\n        except ValueError as e:\n            click.secho(f\"Can not download {a.app_info}\", fg=\"red\")\n\n    if file_type == \"json\":\n        with open(target, \"w\") as fp:\n            json.dump(apps_data, fp)\n    elif file_type == \"excel\":\n        for a_data in apps_data:\n            a_id = a_data.get(\"id\")\n            a_name = a_data.get(\"name\")\n            a_data_flattened = pbi_apps.apps[0].flatten_app(a_data)\n            multi_group_dict_to_excel(\n                a_data_flattened, target / f\"{a_name}_{a_id}.xlsx\"\n            )\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.auth","title":"<code>auth(bearer_token)</code>","text":"<p>get auth bearer token and cache it</p> <pre><code>pbi auth --bearer-token &lt;your_bearer_token&gt;\n</code></pre> <p>or</p> <pre><code>pbi auth -t &lt;your_bearer_token&gt;\n</code></pre> <p>for short.</p> <p>Parameters:</p> Name Type Description Default <code>bearer_token</code> <code>str</code> <p>Bearer token to authenticate with Power BI API</p> required Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@pbi.command()\n@click.option(\"--bearer-token\", \"-t\", help=\"Bearer token\", required=True)\ndef auth(bearer_token: str):\n    \"\"\"get auth bearer token and cache it\n\n    ```\n    pbi auth --bearer-token &lt;your_bearer_token&gt;\n    ```\n\n    or\n\n    ```\n    pbi auth -t &lt;your_bearer_token&gt;\n    ```\n\n    for short.\n\n    :param bearer_token: Bearer token to authenticate with Power BI API\n    \"\"\"\n\n    if bearer_token.startswith(\"Bearer\"):\n        logger.warning(\"Do not include the Bearer string in the begining\")\n        bearer_token = bearer_token.replace(\"Bearer \", \"\")\n\n    if not CONFIG_DIR.exists():\n        logger.info(\"creating config folder: {CONFIG_DIR}\")\n        CONFIG_DIR.mkdir()\n\n    auth_bearer_token = {\n        \"Authorization\": \"Bearer \" + bearer_token,\n    }\n\n    with open(AUTH_CONFIG_FILE, \"w\") as fp:\n        json.dump(auth_bearer_token, fp)\n\n    return auth_bearer_token\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.export","title":"<code>export(group_id, report_id, target)</code>","text":"<p>Export report as file</p> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@reports.command()\n@click.option(\"--group-id\", \"-g\", help=\"Group ID\", required=True)\n@click.option(\"--report-id\", \"-r\", help=\"Report ID\", required=True)\n@click.option(\n    \"--target\",\n    \"-t\",\n    type=click.Path(exists=False, path_type=Path),\n    help=\"target file\",\n    required=True,\n)\ndef export(group_id: str, report_id: str, target: Path):\n    \"\"\"Export report as file\"\"\"\n\n    pbi_report = powerbi_report.Report(\n        auth=load_auth(), verify=False, report_id=report_id, group_id=group_id\n    )\n\n    result = pbi_report.export()\n    # click.echo(result)\n\n    with open(target, \"wb\") as fp:\n        fp.write(result)\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.format_convert","title":"<code>format_convert(source, target, format)</code>","text":"<p>Convert output format of workspaces</p> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@workspaces.command()\n@click.option(\n    \"--source\",\n    \"-s\",\n    type=click.Path(exists=True, path_type=Path),\n    help=\"source file\",\n    required=True,\n)\n@click.option(\n    \"--target\",\n    \"-t\",\n    type=click.Path(exists=False, path_type=Path),\n    help=\"target file\",\n    required=True,\n)\n@click.option(\n    \"--format\",\n    type=click.Choice([\"excel\"]),\n    help=\"format of the file\",\n    default=\"excel\",\n    required=False,\n)\ndef format_convert(source: Path, target: Path, format):\n    \"\"\"Convert output format of workspaces\"\"\"\n    workspaces = Workspaces(auth={}, verify=False)\n\n    click.echo(f\"Converting to {format=}: {source=} -&gt; {target}\")\n\n    with open(source, \"r\") as fp:\n        workspaces_data = json.load(fp)\n\n    flattened = workspaces.flatten_workspaces(workspaces_data[\"value\"])\n\n    multi_group_dict_to_excel(flattened, target)\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.list","title":"<code>list(target_folder, role, file_type='json', file_name='apps')</code>","text":"<p>List Power BI Apps and save them to files</p> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@apps.command()\n@click.option(\n    \"--target-folder\",\n    \"-tf\",\n    type=click.Path(exists=False, path_type=Path),\n    help=\"target folder\",\n    required=True,\n)\n@click.option(\n    \"--file-type\",\n    \"-ft\",\n    type=click.Choice([\"json\", \"excel\"]),\n    default=[\"json\"],\n    multiple=True,\n)\n@click.option(\"--role\", \"-r\", type=click.Choice([\"admin\", \"user\"]), default=\"user\")\n@click.option(\"--file-name\", \"-n\", type=str, help=\"file name\", default=\"apps\")\ndef list(\n    target_folder: Path, role: str, file_type: str = \"json\", file_name: str = \"apps\"\n):\n    \"\"\"List Power BI Apps and save them to files\"\"\"\n    if not target_folder.exists():\n        click.secho(f\"creating folder {target_folder}\", fg=\"blue\")\n        target_folder.mkdir(parents=True, exist_ok=True)\n\n    if role == \"user\":\n        user = powerbi_app.Apps(auth=load_auth(), verify=False)\n    elif role == \"admin\":\n        user = powerbi_admin.Apps(auth=load_auth(), verify=False)\n\n    click.echo(f\"Listing Apps as {role}\")\n\n    result = user()\n\n    if \"json\" in file_type:\n        json_file_path = target_folder / f\"{file_name}.json\"\n        logger.info(f\"Writing json file to {json_file_path}\")\n        with open(json_file_path, \"w\") as fp:\n            json.dump(result, fp)\n\n    if \"excel\" in file_type:\n        excel_file_path = target_folder / f\"{file_name}.xlsx\"\n        logger.info(f\"Writing excel file to {excel_file_path}\")\n        df = pd.json_normalize(result[\"value\"])\n        df.to_excel(excel_file_path)\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.load_auth","title":"<code>load_auth(auth_path=AUTH_CONFIG_FILE)</code>","text":"<p>Load the auth file from the config directory</p> <p>Parameters:</p> Name Type Description Default <code>auth_path</code> <code>Path</code> <p>Path to the auth file</p> <code>AUTH_CONFIG_FILE</code> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>def load_auth(auth_path: Path = AUTH_CONFIG_FILE) -&gt; dict:\n    \"\"\"Load the auth file from the config directory\n\n    :param auth_path: Path to the auth file\n    \"\"\"\n\n    with open(auth_path, \"r\") as fp:\n        auth_data = json.load(fp)\n\n    return auth_data\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.reports","title":"<code>reports(ctx)</code>","text":"<p>Reports Command Group</p> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@pbi.group(invoke_without_command=True)\n@click.pass_context\ndef reports(ctx):\n    \"\"\"Reports Command Group\"\"\"\n    if ctx.invoked_subcommand is None:\n        click.echo(\"Use pbi reports --help.\")\n    else:\n        pass\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.user_access","title":"<code>user_access(user_id, target_folder, file_types, file_name=None)</code>","text":"<p>Get user access information from Power BI API</p> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@users.command()\n@click.option(\"--user-id\", \"-u\", help=\"user id\", type=str, required=True)\n@click.option(\n    \"--target-folder\",\n    \"-tf\",\n    type=click.Path(exists=False, path_type=Path),\n    help=\"target file\",\n    required=False,\n)\n@click.option(\n    \"--file-types\",\n    \"-ft\",\n    type=click.Choice([\"json\", \"excel\"]),\n    multiple=True,\n    default=[\"json\"],\n    required=False,\n)\n@click.option(\n    \"--file-name\", \"-n\", type=str, help=\"file name without extension\", default=None\n)\ndef user_access(\n    user_id: str,\n    target_folder: Optional[Path],\n    file_types: list,\n    file_name: Optional[str] = None,\n):\n    \"\"\"Get user access information from Power BI API\"\"\"\n    if file_name is None:\n        file_name = slugify(user_id)\n\n    user = User(auth=load_auth(), user_id=user_id, verify=False)\n\n    result = user()\n\n    if target_folder is None:\n        logger.info(f\"No target folder provided, printing to interface...\")\n        click.echo(json.dumps(result, indent=4))\n    else:\n        if not target_folder.exists():\n            click.secho(f\"creating folder {target_folder}\", fg=\"blue\")\n            target_folder.mkdir(parents=True, exist_ok=True)\n\n        if \"json\" in file_types:\n            json_file_path = target_folder / f\"{file_name}.json\"\n            logger.info(f\"Writing json file to {json_file_path}...\")\n            with open(json_file_path, \"w\") as fp:\n                json.dump(result, fp)\n        if \"excel\" in file_types:\n            excel_file_path = target_folder / f\"{file_name}.xlsx\"\n            logger.info(f\"Writing excel file to {excel_file_path}...\")\n            df = pd.json_normalize(result)\n            df.to_excel(excel_file_path)\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.users","title":"<code>users(ctx)</code>","text":"<p>Command group for Power BI users</p> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@pbi.group(invoke_without_command=True)\n@click.pass_context\ndef users(ctx):\n    \"\"\"Command group for Power BI users\"\"\"\n    if ctx.invoked_subcommand is None:\n        click.echo(\"Use pbi users --help.\")\n    else:\n        pass\n</code></pre>"},{"location":"references/cli/#pbi_cli.cli.workspaces","title":"<code>workspaces(ctx)</code>","text":"<p>Command group for Power BI workspaces</p> Source code in <code>src/pbi_cli/cli.py</code> <pre><code>@pbi.group(invoke_without_command=True)\n@click.pass_context\ndef workspaces(ctx):\n    \"\"\"Command group for Power BI workspaces\"\"\"\n    if ctx.invoked_subcommand is None:\n        click.echo(\"Use pbi workspaces --help for help.\")\n    else:\n        pass\n</code></pre>"},{"location":"references/powerbi/","title":"<code>pbi_cli.powerbi</code>","text":"<p><code>pbi_cli.powerbi</code> is the module that deals with the Power BI API.</p>"},{"location":"references/powerbi/admin/","title":"<code>pbi_cli.powerbi.admin</code>","text":""},{"location":"references/powerbi/admin/#pbi_cli.powerbi.admin.Apps","title":"<code>Apps</code>","text":"<p>               Bases: <code>Base</code></p> <p>A class to interact with Power BI Apps using the Base class.</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <code>dict</code> <p>dict containing the auth <code>{\"Authorization\": \"Bearer xxx\"}</code></p> required <code>verify</code> <code>bool</code> <p>whether to verify SSL</p> <code>True</code> Source code in <code>src/pbi_cli/powerbi/admin.py</code> <pre><code>class Apps(Base):\n    \"\"\"\n    A class to interact with Power BI Apps using the Base class.\n\n    :param auth: dict containing the auth `{\"Authorization\": \"Bearer xxx\"}`\n    :param verify: whether to verify SSL\n    \"\"\"\n\n    def __init__(self, auth: dict, verify: bool = True):\n        super().__init__(auth=auth, verify=verify)\n\n    @property\n    def _base_uri(self) -&gt; str:\n        \"\"\"\n        Returns the base URI for Power BI Apps API.\n        \"\"\"\n        return \"https://api.powerbi.com/v1.0/myorg/admin/apps\"\n\n    def __call__(\n        self,\n        top: int = 200,\n        format: Literal[\"raw\", \"flatten\"] = \"raw\",\n    ):\n        query_params = {\"top\": top}\n\n        query_params_encoded = self._encode_query_params(query_params)\n        uri = f\"{self._base_uri}?{query_params_encoded}\"\n        result = self._data_retriever.get(uri).json()\n\n        if result.get(\"error\"):\n            raise ValueError(f\"Error: {result}\")\n\n        logger.info(f\"Listing {len(result.get('value', []))} results\")\n\n        if format == \"raw\":\n            return result\n        elif format == \"flatten\":\n            return result[\"value\"]\n</code></pre>"},{"location":"references/powerbi/admin/#pbi_cli.powerbi.admin.Apps._base_uri","title":"<code>_base_uri</code>  <code>property</code>","text":"<p>Returns the base URI for Power BI Apps API.</p>"},{"location":"references/powerbi/admin/#pbi_cli.powerbi.admin.User","title":"<code>User</code>","text":"<p>Accessing user info</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <code>dict</code> <p>dict containing the auth <code>{\"Authorization\": \"Bearer xxx\"}</code></p> required <code>verify</code> <code>bool</code> <p>whether to verify ssl</p> <code>True</code> Source code in <code>src/pbi_cli/powerbi/admin.py</code> <pre><code>class User:\n    \"\"\"Accessing user info\n\n    :param auth: dict containing the auth `{\"Authorization\": \"Bearer xxx\"}`\n    :param verify: whether to verify ssl\n    \"\"\"\n\n    def __init__(self, auth: dict, user_id: str, verify: bool = True):\n        self.auth = auth\n        self.verify = verify\n        self.user_id = user_id\n\n    @property\n    def _data_retriever(self):\n        return DataRetriever(\n            session_query_configs={\"headers\": self.auth, \"verify\": self.verify}\n        )\n\n    @property\n    def _base_uri(self) -&gt; str:\n        return \"https://api.powerbi.com/v1.0/myorg/admin/users/{userId}/artifactAccess\"\n\n    def _get_user_artifacts(\n        self,\n        user_id: str,\n        continueation_uri: Optional[str] = None,\n        existing_data: Optional[list] = [],\n    ) -&gt; list[dict]:\n        \"\"\"downloading user artifacts access\n\n        :param user_id: user id\n        :param continueation_uri: continuation uri from the API return\n        :param existing_data: existing data to append to\n        \"\"\"\n        uri = self._base_uri.format(userId=user_id)\n\n        if continueation_uri is None:\n            current_page = self._data_retriever.get(uri).json()\n        else:\n            logger.info(f\"Using continuation uri: {continueation_uri}\")\n            current_page = self._data_retriever.get(continueation_uri).json()\n\n        if current_page.get(\"error\"):\n            raise ValueError(f\"Error: {current_page}\")\n\n        current_data = current_page.get(\"ArtifactAccessEntities\", [])\n        logger.info(f\"Downloaded {len(current_data)} results\")\n\n        existing_data.extend(current_data)\n\n        return existing_data\n\n    @cached_property\n    def user_artifacts(self) -&gt; list[dict]:\n        return self._get_user_artifacts(user_id=self.user_id)\n\n    def __call__(self) -&gt; dict:\n\n        return {\n            \"artifacts\": self.user_artifacts,\n        }\n</code></pre>"},{"location":"references/powerbi/admin/#pbi_cli.powerbi.admin.User._get_user_artifacts","title":"<code>_get_user_artifacts(user_id, continueation_uri=None, existing_data=[])</code>","text":"<p>downloading user artifacts access</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>user id</p> required <code>continueation_uri</code> <code>Optional[str]</code> <p>continuation uri from the API return</p> <code>None</code> <code>existing_data</code> <code>Optional[list]</code> <p>existing data to append to</p> <code>[]</code> Source code in <code>src/pbi_cli/powerbi/admin.py</code> <pre><code>def _get_user_artifacts(\n    self,\n    user_id: str,\n    continueation_uri: Optional[str] = None,\n    existing_data: Optional[list] = [],\n) -&gt; list[dict]:\n    \"\"\"downloading user artifacts access\n\n    :param user_id: user id\n    :param continueation_uri: continuation uri from the API return\n    :param existing_data: existing data to append to\n    \"\"\"\n    uri = self._base_uri.format(userId=user_id)\n\n    if continueation_uri is None:\n        current_page = self._data_retriever.get(uri).json()\n    else:\n        logger.info(f\"Using continuation uri: {continueation_uri}\")\n        current_page = self._data_retriever.get(continueation_uri).json()\n\n    if current_page.get(\"error\"):\n        raise ValueError(f\"Error: {current_page}\")\n\n    current_data = current_page.get(\"ArtifactAccessEntities\", [])\n    logger.info(f\"Downloaded {len(current_data)} results\")\n\n    existing_data.extend(current_data)\n\n    return existing_data\n</code></pre>"},{"location":"references/powerbi/admin/#pbi_cli.powerbi.admin.Workspaces","title":"<code>Workspaces</code>","text":"<p>Accessing all workspaces</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <code>dict</code> <p>dict containing the auth <code>{\"Authorization\": \"Bearer xxx\"}</code></p> required <code>verify</code> <code>bool</code> <p>whether to verify ssl</p> <code>True</code> Source code in <code>src/pbi_cli/powerbi/admin.py</code> <pre><code>class Workspaces:\n    \"\"\"Accessing all workspaces\n\n    :param auth: dict containing the auth `{\"Authorization\": \"Bearer xxx\"}`\n    :param verify: whether to verify ssl\n    \"\"\"\n\n    def __init__(self, auth: dict, verify: bool = True):\n        self.auth = auth\n        self.verify = verify\n\n    @property\n    def _data_retriever(self):\n        return DataRetriever(\n            session_query_configs={\"headers\": self.auth, \"verify\": self.verify}\n        )\n\n    @property\n    def _base_uri(self) -&gt; str:\n        return \"https://api.powerbi.com/v1.0/myorg/admin/groups\"\n\n    @staticmethod\n    def _flatten_workspace(data_workspace: dict) -&gt; dict:\n\n        workspace_level_keys = [\n            k\n            for k, v in data_workspace.items()\n            if not isinstance(data_workspace.get(k), list)\n        ]\n        keys = [\"users\", \"reports\", \"dashboards\", \"datasets\", \"dataflows\", \"workbooks\"]\n\n        flattened = {}\n\n        for k in keys:\n            flattened[k] = [\n                {\n                    **{\n                        k: v\n                        for k, v in data_workspace.items()\n                        if k in workspace_level_keys\n                    },\n                    **{**d},\n                }\n                for d in data_workspace.get(k, [])\n            ]\n\n        flattened[\"workspace\"] = [\n            {k: v for k, v in data_workspace.items() if k in workspace_level_keys}\n        ]\n\n        return flattened\n\n    def flatten_workspaces(self, data_all_workspaces: list[dict]):\n        all_workspaces = []\n        for w in data_all_workspaces:\n            all_workspaces.append(self._flatten_workspace(w))\n\n        all_workspaces = {\n            k: sum([w.get(k, []) for w in all_workspaces], [])\n            for k in all_workspaces[0]\n        }\n\n        return all_workspaces\n\n    def __call__(\n        self,\n        top: int = 1000,\n        expand: Optional[\n            List[\n                Literal[\n                    \"users\",\n                    \"reports\",\n                    \"dashboards\",\n                    \"datasets\",\n                    \"dataflows\",\n                    \"workbooks\",\n                ]\n            ]\n        ] = None,\n        filter: Optional[str] = None,\n        format: Literal[\"raw\", \"flatten\"] = \"raw\",\n    ):\n        \"\"\"\n\n        See https://learn.microsoft.com/en-us/rest/api/power-bi/admin/groups-get-groups-as-admin\n\n        :param top: top n results\n        :param expand: see official docs\n        :param filter: odata filter, see official docs\n        \"\"\"\n        query_params = {\"top\": top}\n\n        if (\n            (expand is not None)\n            and isinstance(expand, (list, tuple))\n            and len(expand) &gt;= 1\n        ):\n            query_params[\"expand\"] = \",\".join(expand)\n\n        if filter is not None:\n            query_params[\"filter\"] = filter\n\n        query_params_encoded = \"&amp;\".join(\n            [f\"%24{k}={v}\" for k, v in query_params.items()]\n        )\n        uri = f\"{self._base_uri}?{query_params_encoded}\"\n        logger.info(f\"Using API Endpoint: {uri}\")\n\n        result = self._data_retriever.get(uri).json()\n\n        if format == \"raw\":\n            return result\n        elif format == \"flatten\":\n            return self.flatten_workspaces(result[\"value\"])\n</code></pre>"},{"location":"references/powerbi/admin/#pbi_cli.powerbi.admin.Workspaces.__call__","title":"<code>__call__(top=1000, expand=None, filter=None, format='raw')</code>","text":"<p>See https://learn.microsoft.com/en-us/rest/api/power-bi/admin/groups-get-groups-as-admin</p> <p>Parameters:</p> Name Type Description Default <code>top</code> <code>int</code> <p>top n results</p> <code>1000</code> <code>expand</code> <code>Optional[List[Literal['users', 'reports', 'dashboards', 'datasets', 'dataflows', 'workbooks']]]</code> <p>see official docs</p> <code>None</code> <code>filter</code> <code>Optional[str]</code> <p>odata filter, see official docs</p> <code>None</code> Source code in <code>src/pbi_cli/powerbi/admin.py</code> <pre><code>def __call__(\n    self,\n    top: int = 1000,\n    expand: Optional[\n        List[\n            Literal[\n                \"users\",\n                \"reports\",\n                \"dashboards\",\n                \"datasets\",\n                \"dataflows\",\n                \"workbooks\",\n            ]\n        ]\n    ] = None,\n    filter: Optional[str] = None,\n    format: Literal[\"raw\", \"flatten\"] = \"raw\",\n):\n    \"\"\"\n\n    See https://learn.microsoft.com/en-us/rest/api/power-bi/admin/groups-get-groups-as-admin\n\n    :param top: top n results\n    :param expand: see official docs\n    :param filter: odata filter, see official docs\n    \"\"\"\n    query_params = {\"top\": top}\n\n    if (\n        (expand is not None)\n        and isinstance(expand, (list, tuple))\n        and len(expand) &gt;= 1\n    ):\n        query_params[\"expand\"] = \",\".join(expand)\n\n    if filter is not None:\n        query_params[\"filter\"] = filter\n\n    query_params_encoded = \"&amp;\".join(\n        [f\"%24{k}={v}\" for k, v in query_params.items()]\n    )\n    uri = f\"{self._base_uri}?{query_params_encoded}\"\n    logger.info(f\"Using API Endpoint: {uri}\")\n\n    result = self._data_retriever.get(uri).json()\n\n    if format == \"raw\":\n        return result\n    elif format == \"flatten\":\n        return self.flatten_workspaces(result[\"value\"])\n</code></pre>"},{"location":"references/powerbi/app/","title":"<code>pbi_cli.powerbi.app</code>","text":""},{"location":"references/powerbi/app/#pbi_cli.powerbi.app.App","title":"<code>App</code>","text":"<p>               Bases: <code>Base</code></p> <p>A class to interact with Power BI App</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <code>dict</code> <p>dict containing the auth <code>{\"Authorization\": \"Bearer xxx\"}</code></p> required <code>verify</code> <code>bool</code> <p>whether to verify SSL</p> <code>True</code> Source code in <code>src/pbi_cli/powerbi/app.py</code> <pre><code>class App(Base):\n    \"\"\"\n    A class to interact with Power BI App\n\n    :param auth: dict containing the auth `{\"Authorization\": \"Bearer xxx\"}`\n    :param verify: whether to verify SSL\n    \"\"\"\n\n    def __init__(\n        self,\n        auth: dict,\n        app_id: str,\n        verify: bool = True,\n        app_info: Optional[dict] = None,\n    ):\n        super().__init__(auth=auth, verify=verify)\n        self.app_id = app_id\n        self.app_info = app_info\n\n    @staticmethod\n    def flatten_app(data_app: dict) -&gt; dict:\n\n        app_level_keys = [\n            k for k, v in data_app.items() if not isinstance(data_app.get(k), list)\n        ]\n        keys = [\"users\", \"reports\", \"dashboards\"]\n\n        flattened = {}\n\n        for k in keys:\n            flattened[k] = [\n                {**{k: v for k, v in data_app.items() if k in app_level_keys}, **{**d}}\n                for d in data_app.get(k, [])\n            ]\n\n        flattened[\"app\"] = [{k: v for k, v in data_app.items() if k in app_level_keys}]\n\n        return flattened\n\n    @property\n    def _base_uri(self) -&gt; str:\n        \"\"\"base uri\"\"\"\n        return f\"https://api.powerbi.com/v1.0/myorg/apps/{self.app_id}\"\n\n    @cached_property\n    def meta(self) -&gt; dict:\n        uri = f\"{self._base_uri}\"\n        result = self._data_retriever.get(uri).json()\n\n        if result.get(\"error\"):\n            raise ValueError(f\"Error: {result}\")\n\n        return result\n\n    @cached_property\n    def reports(self) -&gt; dict:\n\n        uri = f\"{self._base_uri}/reports\"\n        result = self._data_retriever.get(uri).json()\n\n        if result.get(\"error\"):\n            raise ValueError(f\"Error: {result}\")\n\n        logger.info(f\"Listing {len(result.get('value', []))} results\")\n\n        return result\n\n    @cached_property\n    def dashboards(self) -&gt; dict:\n\n        uri = f\"{self._base_uri}/dashboards\"\n        result = self._data_retriever.get(uri).json()\n\n        if result.get(\"error\"):\n            raise ValueError(f\"Error: {result}\")\n\n        logger.info(f\"Listing {len(result.get('value', []))} results\")\n\n        return result\n\n    def __call__(self):\n        result = self.meta\n        result[\"reports\"] = self.reports.get(\"value\", [])\n        result[\"dashboards\"] = self.dashboards.get(\"value\", [])\n\n        return result\n</code></pre>"},{"location":"references/powerbi/app/#pbi_cli.powerbi.app.App._base_uri","title":"<code>_base_uri</code>  <code>property</code>","text":"<p>base uri</p>"},{"location":"references/powerbi/app/#pbi_cli.powerbi.app.Apps","title":"<code>Apps</code>","text":"<p>               Bases: <code>Base</code></p> <p>A class to interact with Power BI Apps</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <code>dict</code> <p>dict containing the auth <code>{\"Authorization\": \"Bearer xxx\"}</code></p> required <code>verify</code> <code>bool</code> <p>whether to verify SSL</p> <code>True</code> Source code in <code>src/pbi_cli/powerbi/app.py</code> <pre><code>class Apps(Base):\n    \"\"\"\n    A class to interact with Power BI Apps\n\n    :param auth: dict containing the auth `{\"Authorization\": \"Bearer xxx\"}`\n    :param verify: whether to verify SSL\n    \"\"\"\n\n    def __init__(\n        self, auth: dict, verify: bool = True, cache_file: Optional[Path] = None\n    ):\n        super().__init__(auth=auth, verify=verify)\n        self.cache_file = cache_file\n        self.cache = self._load_cache(self.cache_file)\n\n    @staticmethod\n    def _load_cache(cache_file: Path) -&gt; dict:\n        with open(cache_file, \"r\") as fp:\n            data = json.load(fp)\n\n        return data\n\n    @property\n    def apps(self):\n        return [\n            App(auth=self.auth, app_id=i.get(\"id\"), verify=self.verify, app_info=i)\n            for i in self.cache.get(\"value\", [])\n        ]\n\n    @property\n    def _base_uri(self) -&gt; str:\n        \"\"\"\n        Returns the base URI for Power BI Apps API.\n        \"\"\"\n        return \"https://api.powerbi.com/v1.0/myorg/apps\"\n\n    def _update_cache(self, new_data: dict) -&gt; dict:\n        cache_new = new_data\n        new_ids = [i.get(\"id\") for i in new_data.get(\"value\", [])]\n\n        cache_new[\"value\"] = [i for i in new_data.get(\"value\", [])] + [\n            i for i in self.cache.get(\"value\", []) if i.get(\"id\") not in new_ids\n        ]\n\n        self.cache = cache_new\n\n    def __call__(\n        self, format: Literal[\"raw\", \"flatten\"] = \"raw\", cache_update: bool = True\n    ):\n        uri = self._base_uri\n        result = self._data_retriever.get(uri).json()\n\n        if result.get(\"error\"):\n            raise ValueError(f\"Error: {result}\")\n\n        logger.info(f\"Listing {len(result.get('value', []))} results\")\n\n        if cache_update:\n            self._update_cache(result)\n\n        if format == \"raw\":\n            return result\n        elif format == \"flatten\":\n            return result[\"value\"]\n</code></pre>"},{"location":"references/powerbi/app/#pbi_cli.powerbi.app.Apps._base_uri","title":"<code>_base_uri</code>  <code>property</code>","text":"<p>Returns the base URI for Power BI Apps API.</p>"},{"location":"references/powerbi/base/","title":"<code>pbi_cli.powerbi.base</code>","text":""},{"location":"references/powerbi/base/#pbi_cli.powerbi.base.Base","title":"<code>Base</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract Base Class for accessing all workspaces.</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <code>dict</code> <p>dict containing the auth <code>{\"Authorization\": \"Bearer xxx\"}</code></p> required <code>verify</code> <code>bool</code> <p>whether to verify SSL</p> <code>True</code> Source code in <code>src/pbi_cli/powerbi/base.py</code> <pre><code>class Base(ABC):\n    \"\"\"\n    Abstract Base Class for accessing all workspaces.\n\n    :param auth: dict containing the auth `{\"Authorization\": \"Bearer xxx\"}`\n    :param verify: whether to verify SSL\n    \"\"\"\n\n    def __init__(self, auth: dict, verify: bool = True):\n        self.auth = auth\n        self.verify = verify\n\n    @property\n    def _data_retriever(self) -&gt; DataRetriever:\n        \"\"\"\n        Returns an instance of DataRetriever configured with session query configs.\n        \"\"\"\n        return DataRetriever(\n            session_query_configs={\"headers\": self.auth, \"verify\": self.verify}\n        )\n\n    @staticmethod\n    def _encode_query_params(query_params: dict, leading_char: str = \"%24\") -&gt; str:\n        query_params_encoded = \"&amp;\".join(\n            [f\"{leading_char}{k}={v}\" for k, v in query_params.items()]\n        )\n        return query_params_encoded\n\n    @property\n    @abstractmethod\n    def _base_uri(self) -&gt; str:\n        \"\"\"\n        Abstract property to return the base URI. Must be implemented by subclasses.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"references/powerbi/base/#pbi_cli.powerbi.base.Base._base_uri","title":"<code>_base_uri</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Abstract property to return the base URI. Must be implemented by subclasses.</p>"},{"location":"references/powerbi/base/#pbi_cli.powerbi.base.Base._data_retriever","title":"<code>_data_retriever</code>  <code>property</code>","text":"<p>Returns an instance of DataRetriever configured with session query configs.</p>"},{"location":"references/powerbi/io/","title":"<code>pbi_cli.powerbi.io</code>","text":""},{"location":"references/powerbi/io/#pbi_cli.powerbi.io.multi_group_dict_to_excel","title":"<code>multi_group_dict_to_excel(data, target)</code>","text":"<p>Writes a dictionary of lists into an Excel file, with each key as a worksheet.</p> <pre><code>data = {\n    \"Sheet1\": [{\"a\": 1, \"b\": 2}, {\"a\": 3, \"b\": 4}],\n    \"Sheet2\": [{\"x\": 10, \"y\": 20}, {\"x\": 30, \"y\": 40}],\n}\ndict_to_excel(data, \"output.xlsx\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>A dictionary where each key maps to a list of dictionaries or data.</p> required <code>file_name</code> <p>Name of the Excel file to save</p> required Source code in <code>src/pbi_cli/powerbi/io.py</code> <pre><code>def multi_group_dict_to_excel(data: dict, target: Path):\n    \"\"\"\n    Writes a dictionary of lists into an Excel file, with each key as a worksheet.\n\n    ```python\n    data = {\n        \"Sheet1\": [{\"a\": 1, \"b\": 2}, {\"a\": 3, \"b\": 4}],\n        \"Sheet2\": [{\"x\": 10, \"y\": 20}, {\"x\": 30, \"y\": 40}],\n    }\n    dict_to_excel(data, \"output.xlsx\")\n    ```\n\n    :param data: A dictionary where each key maps to a list of dictionaries or data.\n    :param file_name: Name of the Excel file to save\n    \"\"\"\n    with pd.ExcelWriter(target, engine=\"openpyxl\") as writer:\n        for sheet_name, rows in data.items():\n            df = pd.DataFrame(rows)\n            df.to_excel(writer, sheet_name=sheet_name, index=False)\n</code></pre>"},{"location":"references/powerbi/report/","title":"<code>pbi_cli.powerbi.report</code>","text":""},{"location":"references/powerbi/report/#pbi_cli.powerbi.report.Report","title":"<code>Report</code>","text":"<p>               Bases: <code>Base</code></p> <p>A class to interact with Power BI Report</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <code>dict</code> <p>dict containing the auth <code>{\"Authorization\": \"Bearer xxx\"}</code></p> required <code>verify</code> <code>bool</code> <p>whether to verify SSL</p> <code>True</code> Source code in <code>src/pbi_cli/powerbi/report.py</code> <pre><code>class Report(Base):\n    \"\"\"\n    A class to interact with Power BI Report\n\n    :param auth: dict containing the auth `{\"Authorization\": \"Bearer xxx\"}`\n    :param verify: whether to verify SSL\n    \"\"\"\n\n    def __init__(\n        self,\n        auth: dict,\n        report_id: str,\n        group_id: Optional[str] = None,\n        verify: bool = True,\n    ):\n        super().__init__(auth=auth, verify=verify)\n        self.report_id = report_id\n        self.group_id = group_id\n\n    @property\n    def _base_uri(self) -&gt; str:\n        \"\"\"\n        Returns the base URI for Power BI Apps API.\n        \"\"\"\n        if self.group_id is None:\n            return f\"https://api.powerbi.com/v1.0/myorg/reports/{self.report_id}\"\n        else:\n            return f\"https://api.powerbi.com/v1.0/myorg/groups/{self.group_id}/reports/{self.report_id}\"\n\n    def export(self):\n\n        uri = f\"{self._base_uri}/Export\"\n        req_result = self._data_retriever.get(uri)\n\n        if req_result.ok:\n            return req_result.content\n        else:\n            req_result.raise_for_status()\n</code></pre>"},{"location":"references/powerbi/report/#pbi_cli.powerbi.report.Report._base_uri","title":"<code>_base_uri</code>  <code>property</code>","text":"<p>Returns the base URI for Power BI Apps API.</p>"}]}